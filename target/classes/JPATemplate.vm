package $packageName#[[.]]#Entities;

import jakarta.persistence.*;

import java.util.List;


#if ($class.getSubClasses().size() > 0)
@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public class $class.name {
## class id part
@Id()
@GeneratedValue()
private long id;
#end


#if ($class.getSubClasses().size() == 0)
@Entity
public class $class.name #if ($class.getSuperClasses().size() > 0) extends $class.getSuperClasses().get(0).getName() #end {
    ## class id part
    #if ($class.getSuperClasses().size() == 0)
    @Id()
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    #end

#end


## attributes part
#foreach($attribute in $class.getAttributes())
    #if($attribute.getName().contains("derived"))
    private $attribute.getType().getName() $attribute.getName().replace("derived"," ").strip();
    #else
    private $attribute.getType().getName() $attribute.getName();
    #end
#end

## associations part
#set($counter = 0)
#foreach($ass in $class.getAssoziations())
    #if ($ass.getInverse().getMultiplicity() == "0..*" && ($counter%2 == 0)) @OneToMany(mappedBy = "$ass.getRoleName()")
    private List<$ass.getInverse().getReference().getName()> $ass.getInverse().getName();

    #elseif($ass.getInverse().getMultiplicity() == "1" && ($counter%2 == 0)) @ManyToOne
    private $ass.getInverse().getReference().getName() $ass.getInverse().getRoleName();

    #elseif($ass.getInverse().getMultiplicity() == "0..1" && ($counter%2 == 0))@ManyToOne
    private $ass.getInverse().getReference().getName() $ass.getInverse().getRoleName();
    #end #set($counter = $counter + 1)
#end

public $class.getName() (){}


#if ($class.getAttributes().size() > 0)

## constructor part
#set($counter = 1 + $dCounterSuperClass)
public $class.getName() (#if ($class.getSuperClasses().size() > 0) #foreach($attr in $superClass.getAttributes()) #if(!$attr.getName().contains("derived"))$attr.getType() $attr.getName() #if($superClass.getAttributes().size() > $counter) , #set ($counter = $counter + 1) #end #end  #end #if ($class.getAttributes().size() > 0) , #end #end
                       #if ($class.getAttributes().size() > 0) #set($counter = 1 + $dCounter)  #foreach($attr in $class.getAttributes())  #if(!$attr.getName().contains("derived"))$attr.getType() $attr.getName()  #if($class.getAttributes().size() > $counter) , #set ($counter = $counter + 1) #end #end #end #if ($assoziations.size() - $assoziationCounter > 0) , #end #end
                        #set($counter = 1 + $assoziationCounter) #foreach($ass in $assoziations) #if($ass.getMultiplicity() == "1") $ass.getReference().getName() $ass.getName()  #if($assoziations.size() > $counter) , #set ($counter = $counter + 1) #end #end  #end
        ){
    #if ($class.getSuperClasses().size() > 0)
    super(#set($counter = 1 + $dCounterSuperClass) #foreach($attr in $superClass.getAttributes()) #if(!$attr.getName().contains("derived"))$attr.getName()   #if($superClass.getAttributes().size() > $counter) , #set ($counter = $counter + 1) #end #end #end);
    #end
    #foreach($attr in $class.getAttributes())  #if(!$attr.getName().contains("derived")) this.$attr.getName() = $attr.getName();#end #end
    #foreach($ass in $assoziations) #if($ass.getMultiplicity() == "1") this.$ass.getName() = $ass.getName(); #end
    #end
}

#end

## setters part
#foreach($attribute in $class.getAttributes())
    #if($attribute.getName().contains("derived"))
    public void set$attribute.getName().replace("derived"," ").strip()($attribute.getType() var) {
            // USER CODE START SETTER PART

            // USER CODE END SETTER PART
    }
    #else
    public void set$attribute.getName()($attribute.getType() var) {
            this.$attribute.getName() = var;

            }
    #end
#end


## getters part
#foreach($attribute in $class.getAttributes())
    #if($attribute.getName().contains("derived"))
    public $attribute.getType() get$attribute.getName().replace("derived"," ").strip()() {
            // USER CODE START GETTER PART

            // USER CODE END GETTER PART
            return null;
    }
    #else
    public $attribute.getType() get$attribute.getName()() {
            return this.$attribute.getName();
            }
    #end
#end

@Override
public String toString() {
        return "{"+
                #if ($class.getSuperClasses().size() > 0) super.toString() + #end
            #foreach($attr in $class.getAttributes())
                #if($attr.getName().contains("derived"))
                        "$attr.getName().replace("derived"," ").strip()=" + $attr.getName().replace("derived"," ").strip()+
                #else
                        "$attr.getName()=" + $attr.getName()+
                #end #end
                "}";
        }
}
